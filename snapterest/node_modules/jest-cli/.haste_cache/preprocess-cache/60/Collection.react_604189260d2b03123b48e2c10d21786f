'use strict';var React = require('react');
var ReactDOMServer = require('react-dom/server');
var CollectionControls = require('./CollectionControls.react');
var TweetList = require('./TweetList.react');
var Header = require('./Header.react');

var Collection = React.createClass({ displayName: 'Collection', 
    createHtmlMarkupStringOfTweetList: function createHtmlMarkupStringOfTweetList() {
        var htmlString = ReactDOMServer.renderToStaticMarkup(
        React.createElement(TweetList, { tweets: this.props.tweets }));

        var htmlMarkUp = { 
            html: htmlString };

        return JSON.stringify(htmlMarkUp);}, 


    getListOfTweetIds: function getListOfTweetIds() {
        //console.log("this.props.tweets", this.props.tweets);
        return Object.keys(this.props.tweets);}, 


    getNoOfTweetsInCollecton: function getNoOfTweetsInCollecton() {
        return this.getListOfTweetIds().length;}, 


    render: function render() {
        var noOfTweetsInCollection = this.getNoOfTweetsInCollecton();
        if (noOfTweetsInCollection > 0) {
            var tweets = this.props.tweets;
            var htmlMarkUp = this.createHtmlMarkupStringOfTweetList();
            var removeAllTweetsFromCollection = this.props.onRemoveAllTweetsFromCollection;
            var handleRemoveTweetFromCollection = this.props.onRemoveTweetFromCollection;

            return (
                React.createElement('div', null, 
                React.createElement(CollectionControls, { 
                    noOfTweetsInCollection: noOfTweetsInCollection, 
                    htmlMarkUp: htmlMarkUp, 
                    onRemoveAllTweetsFromCollection: removeAllTweetsFromCollection }), 
                React.createElement(TweetList, { 
                    tweets: tweets, 
                    onRemoveTweetFromCollection: handleRemoveTweetFromCollection })));}




        return React.createElement(Header, { text: 'Your collection is empty' });} });



module.exports = Collection;