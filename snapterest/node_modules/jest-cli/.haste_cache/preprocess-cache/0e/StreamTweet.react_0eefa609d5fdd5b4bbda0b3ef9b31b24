'use strict';var React = require('react');
var ReactDOM = require('react-dom');
var Header = require('./Header.react');
var Tweet = require('./Tweet.react');

var StreamTweet = React.createClass({ displayName: 'StreamTweet', 
    getInitialState: function getInitialState() {
        //console.log("StreamTweet: 1. getInitialState()");
        return { 
            numberOfCharsIsIncreasing: null, 
            headerText: null };}, 


    componentWillMount: function componentWillMount() {
        //console.log("StreamTweet: 2. componentWillMount()");

        this.setState({ 
            numberOfCharsIsIncreasing: true, 
            headerText: "Latest public photo from Twitter" });


        window.snapterest = { 
            noOfReceivedTweets: 1, 
            noOfDisplayedTweets: 1 };}, 



    componentDidMount: function componentDidMount() {
        //console.log("StreamTweet: 3.1. componentDidMount()");

        var componentDOMRepresentation = ReactDOM.findDOMNode(this);
        window.snapterest.headerHtml = componentDOMRepresentation.children[0].outerHTML;
        window.snapterest.tweetHtml = componentDOMRepresentation.children[1].outerHTML;}, 

    componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
        //console.log("StreamTweet: 4. componentWillReceiveProps()");

        var currentTweetLength = this.props.tweet.text.length;
        var nextTweetLength = nextProps.tweet.text.length;
        var isNoOfCharsIncreasing = nextTweetLength > currentTweetLength;
        var headerText;

        this.setState({ 
            numberOfCharsIsIncreasing: isNoOfCharsIncreasing });


        if (isNoOfCharsIncreasing) {
            headerText = 'Number of Chars is increasing';} else 
        {
            headerText = 'Latest public photo from Twitter';}


        this.setState({ 
            headerText: headerText });


        window.snapterest.noOfReceivedTweets++;}, 


    shouldComponentUpdate: function shouldComponentUpdate(nextProps, nextState) {
        //console.log("StreamTweet: 5. shouldComponentUpdate()");
        return nextProps.tweet && nextProps.tweet.text ? nextProps.tweet.text.length > 1 : false;}, 


    componentWillUpdate: function componentWillUpdate(nextProps, nextState) {
        //console.log("StreamTweet: 6. componentWillUpdate()");
    }, 


    componentDidUpdate: function componentDidUpdate(precProps, prevState) {
        //console.log("StreamTweet: 7. componentDidUpdate()");
        window.snapterest.noOfDisplayedTweets++;}, 


    componentWillUnmount: function componentWillUnmount() {
        //console.log("StreamTweet: 8. componentWillUnmount()");
        delete window.snapterest;}, 

    render: function render() {
        //console.log("StreamTweet: 3. render");
        return (
            React.createElement('section', null, 
            React.createElement(Header, { text: this.state.headerText }), 
            React.createElement(Tweet, { 
                tweet: this.props.tweet, 
                onImageClick: this.props.onAddTweetToCollection })));} });





module.exports = StreamTweet;